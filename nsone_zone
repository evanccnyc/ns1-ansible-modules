#!/usr/bin/python

from nsone import NSONE
from nsone.rest.errors import ResourceException

CREATE_STATES = ['present', 'active']
DELETE_STATES = ['absent', 'deleted']

STATES = CREATE_STATES + DELETE_STATES

ZONE_KEYS = [
	'refresh',
	'retry',
	'expiry',
	'nx_ttl',
	'link',
	'networks',
	'secondary',
	'secondary_enabled',
	'primary_ip',
	'primary_port',
	'primary',
	'primary_enabled',
	'secondaries'
]

def get_zone(nsone, module):
	to_return = None
	try:
		to_return = nsone.loadZone(module.params.get('name'))
	except ResourceException as re:
		if re.response.code != 404:
			module.fail_json(msg="error code %s - %s " % ( re.response.code, re.message ))
			to_return = None
	return to_return

def update(zone, module):
	changed = False
	args = {}
	for i in ZONE_KEYS:
		if ( 
			module.params.get(i) and 
				( 
					not zone.data or
					i not in zone.data or
					module.params.get(i) != zone.data[i]
				)
			):
			changed = True
			args[i] = module.params.get(i)

	if changed:
		zone = zone.update(**args)

	module.exit_json(changed=changed, id=zone['id'], data=zone.data)


def main():
	module = AnsibleModule(
		argument_spec 			= dict(
			apiKey    			= dict(required=True),
			name				= dict(required=True),
			refresh				= dict(required=False, type='int'),
			retry				= dict(required=False, type='int'),
			expiry				= dict(required=False, type='int'),
			nx_ttl				= dict(required=False, type='int'),
			link				= dict(required=False),
			networks			= dict(required=False),
			secondary			= dict(required=False),
			primary 			= dict(required=False),
			state				= dict(required=False, default='present', choices=STATES),
			),
		supports_check_mode=False
	)

	nsone = NSONE(apiKey=module.params.get('apiKey'))
	
	zone = get_zone(nsone, module)

	# zone found
	if zone:
		if module.params.get('state') in DELETE_STATES:
			# we want it deleted
			zone.delete()
			module.exit_json(changed=True)
		else:
			# we want to update it if changed
			update(zone, module)
	else:
		if module.params.get('state') in DELETE_STATES:
			module.exit_json(changed=False)
		else:
			zone = nsone.createZone(module.params.get('name'))
			module.exit_json(changed=True, id=zone['id'], data=zone.data)
			

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()